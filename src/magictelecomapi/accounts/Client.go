/*
 * magictelecomapi
 *
 * This file was automatically generated by APIMATIC v2.0 on 06/23/2016
 */
package accounts

import(
    "github.com/apimatic/unirest-go"
    "magictelecomapi"
    "magictelecomapi/apihelper"
    "magictelecomapi/models"
)
/*
 * Client structure as interface implementation
 */
type ACCOUNTS_IMPL struct { }

/**
 * Create a new caller location
 * @param    string                            accountNumber            parameter: Required
 * @param    *models.CallerLocationForm        callerLocationForm       parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) CreateCallerLocations (
            accountNumber string,
            callerLocationForm *models.CallerLocationForm) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/caller_locations"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Post(queryBuilder, headers, callerLocationForm)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Get a caller location by Id
 * @param    string        accountNumber          parameter: Required
 * @param    int           callerLocationId       parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetCallerLocationById (
            accountNumber string,
            callerLocationId int) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/caller_locations/{caller_location_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "caller_location_id" : callerLocationId,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Delete all caller locations
 * @param    string        accountNumber      parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) DeleteCallerLocations (
            accountNumber string) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/caller_locations"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Delete(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Update a caller location
 * @param    string                            accountNumber            parameter: Required
 * @param    int                               callerLocationId         parameter: Required
 * @param    *models.CallerLocationForm        callerLocationForm       parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) UpdateCallerLocationById (
            accountNumber string,
            callerLocationId int,
            callerLocationForm *models.CallerLocationForm) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/caller_locations/{caller_location_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "caller_location_id" : callerLocationId,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Put(queryBuilder, headers, callerLocationForm)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("	 Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Delete a caller location by id
 * @param    string        accountNumber          parameter: Required
 * @param    int           callerLocationId       parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) DeleteCallerLocationById (
            accountNumber string,
            callerLocationId int) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/caller_locations/{caller_location_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "caller_location_id" : callerLocationId,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Delete(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("	 Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Allow clients to get the list of caller locations for the specific account.
 * @param    string        accountNumber      parameter: Required
 * @param    *int          page               parameter: Optional
 * @param    *int          limit              parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetCallerLocations (
            accountNumber string,
            page *int,
            limit *int) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/caller_locations"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithQueryParameters(queryBuilder, map[string]interface{} {
        "page" : apihelper.ToString(*page, "1"),
        "limit" : apihelper.ToString(*limit, "10"),
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Allow the admin to get the list of all accounts.
 * @param    *int           page       parameter: Optional
 * @param    *int           limit      parameter: Optional
 * @param    *string        filter     parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetAccounts (
            page *int,
            limit *int,
            filter *string) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts"

    //variable to hold errors
    var err error = nil
    
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithQueryParameters(queryBuilder, map[string]interface{} {
        "page" : apihelper.ToString(*page, "1"),
        "limit" : apihelper.ToString(*limit, "10"),
        "filter" : filter,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Create a new account.
 * @param    *models.AccountForm        accountForm      parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) CreateAccount (
            accountForm *models.AccountForm) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Post(queryBuilder, headers, accountForm)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Delete an account
 * @param    string        accountNumber      parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) DeleteAccount (
            accountNumber string) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Delete(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Allow clients to get a specific account.
 * @param    string        accountNumber      parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetAccount (
            accountNumber string) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 *  Update an account by a given account_number
 * @param    string                     accountNumber      parameter: Required
 * @param    *models.AccountForm        accountForm        parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) UpdateAccount (
            accountNumber string,
            accountForm *models.AccountForm) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Put(queryBuilder, headers, accountForm)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Deletes all cdrs requests from customer's account.
 * @param    string        accountNumber      parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) DeleteCdrs (
            accountNumber string) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/cdrs"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Delete(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Allow clients to get the list of cdr request for the specific account.
 * @param    string         accountNumber      parameter: Required
 * @param    *int           page               parameter: Optional
 * @param    *int           limit              parameter: Optional
 * @param    *string        filter             parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetCdrs (
            accountNumber string,
            page *int,
            limit *int,
            filter *string) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/cdrs"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithQueryParameters(queryBuilder, map[string]interface{} {
        "page" : apihelper.ToString(*page, "1"),
        "limit" : apihelper.ToString(*limit, "10"),
        "filter" : filter,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Creates a cdr request
 * @param    string                 accountNumber      parameter: Required
 * @param    *models.CdrForm        cdrsForm           parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) CreateCdrs (
            accountNumber string,
            cdrsForm *models.CdrForm) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/cdrs"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Post(queryBuilder, headers, cdrsForm)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Allow clients to download the cdrs in a file
 * @param    string        accountNumber      parameter: Required
 * @param    string        cdrId              parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetCdrById (
            accountNumber string,
            cdrId string) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/cdrs/{cdr_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "cdr_id" : cdrId,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("	 Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Deletes a cdr file from customer's account.
 * @param    string        accountNumber      parameter: Required
 * @param    string        cdrId              parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) DeleteCdrById (
            accountNumber string,
            cdrId string) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/cdrs/{cdr_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "cdr_id" : cdrId,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Delete(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Deletes all phone_number from customer's account. These numbers must be unassigned and returned to Magic stock.
 * @param    string        accountNumber      parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) DeleteDids (
            accountNumber string) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/dids"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Delete(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Deletes a phone_number from customer's account. This number must be unassigned and returned to Magic stock.
 * @param    string        accountNumber        parameter: Required
 * @param    string        telephoneNumber      parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) DeleteTelephoneNumber (
            accountNumber string,
            telephoneNumber string) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/dids/{telephone_number}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "telephone_number" : telephoneNumber,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Delete(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Allow clients to get the a specific phone number.
 * @param    string        accountNumber        parameter: Required
 * @param    string        telephoneNumber      parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetTelephoneNumber (
            accountNumber string,
            telephoneNumber string) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/dids/{telephone_number}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "telephone_number" : telephoneNumber,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Allow client to perform operations on a specific did
 * @param    string                             accountNumber             parameter: Required
 * @param    string                             telephoneNumber           parameter: Required
 * @param    *models.TelephoneNumberForm        telephoneNumberForm       parameter: Required
 * @return	Returns the  response from the API call
 */
func (me *ACCOUNTS_IMPL) UpdateTelephoneNumber (
            accountNumber string,
            telephoneNumber string,
            telephoneNumberForm *models.TelephoneNumberForm) (error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/dids/{telephone_number}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "telephone_number" : telephoneNumber,
    }) 
    if err != nil {
        //error in template param handling
        return err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Patch(queryBuilder, headers, telephoneNumberForm)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return err
    }
    
    //returning the response
    return nil
}

/**
 * Allow clients to get the list of numbers for the specific account
 * @param    string         accountNumber      parameter: Required
 * @param    *int           page               parameter: Optional
 * @param    *int           limit              parameter: Optional
 * @param    *string        filter             parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetDids (
            accountNumber string,
            page *int,
            limit *int,
            filter *string) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/dids"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithQueryParameters(queryBuilder, map[string]interface{} {
        "page" : apihelper.ToString(*page, "1"),
        "limit" : apihelper.ToString(*limit, "10"),
        "filter" : filter,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Deletes all trunks from customer's account. Numbers on that trunk must be unassigned and returned to Magic stock
 * @param    string        accountNumber      parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) DeleteTrunks (
            accountNumber string) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/trunks"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Delete(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Allow clients to get the list of trunks for the specific account
 * @param    string         accountNumber      parameter: Required
 * @param    *int           page               parameter: Optional
 * @param    *int           limit              parameter: Optional
 * @param    *string        filter             parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetTrunks (
            accountNumber string,
            page *int,
            limit *int,
            filter *string) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/trunks"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithQueryParameters(queryBuilder, map[string]interface{} {
        "page" : apihelper.ToString(*page, "1"),
        "limit" : apihelper.ToString(*limit, "10"),
        "filter" : filter,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Deletes a trunk from customer's account. Numbers on that trunk must be unassigned and returned to Magic stock.
 * @param    string        accountNumber      parameter: Required
 * @param    string        trunkId            parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) DeleteTrunkById (
            accountNumber string,
            trunkId string) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/trunks/{trunk_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "trunk_id" : trunkId,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Delete(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Allow clients to get the a specific trunk
 * @param    string        accountNumber      parameter: Required
 * @param    string        trunkId            parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetTrunkById (
            accountNumber string,
            trunkId string) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/trunks/{trunk_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "trunk_id" : trunkId,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Delete all carts from an account
 * @param    string        accountNumber      parameter: Required
 * @return	Returns the  response from the API call
 */
func (me *ACCOUNTS_IMPL) DeleteCarts (
            accountNumber string) (error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/carts"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Delete(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return err
    }
    
    //returning the response
    return nil
}

/**
 * Allow clients to get the list of carts.
 * @param    string         accountNumber      parameter: Required
 * @param    *int           page               parameter: Optional
 * @param    *int           limit              parameter: Optional
 * @param    *string        filter             parameter: Optional
 * @param    *string        sort               parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetCarts (
            accountNumber string,
            page *int,
            limit *int,
            filter *string,
            sort *string) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/carts"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithQueryParameters(queryBuilder, map[string]interface{} {
        "page" : apihelper.ToString(*page, "1"),
        "limit" : apihelper.ToString(*limit, "10"),
        "filter" : filter,
        "sort" : sort,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Create an cart
 * @param    string        accountNumber      parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) CreateCarts (
            accountNumber string) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/carts"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Post(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 403) {
        err = apihelper.NewAPIError("User not authorized to perform the operation", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Delete a cart
 * @param    string        accountNumber      parameter: Required
 * @param    string        cartId             parameter: Required
 * @return	Returns the  response from the API call
 */
func (me *ACCOUNTS_IMPL) DeleteCart (
            accountNumber string,
            cartId string) (error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/carts/{cart_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "cart_id" : cartId,
    }) 
    if err != nil {
        //error in template param handling
        return err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Delete(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return err
    }
    
    //returning the response
    return nil
}

/**
 * Allow clients to get a specific cart.
 * @param    string        accountNumber      parameter: Required
 * @param    string        cartId             parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetCart (
            accountNumber string,
            cartId string) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/carts/{cart_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "cart_id" : cartId,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Checkout a cart and create an order
 * @param    string                          accountNumber          parameter: Required
 * @param    string                          cartId                 parameter: Required
 * @param    *models.CartCheckoutForm        cartCheckoutForm       parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) CreateCartCheckout (
            accountNumber string,
            cartId string,
            cartCheckoutForm *models.CartCheckoutForm) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/carts/{cart_id}/checkout"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "cart_id" : cartId,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Post(queryBuilder, headers, cartCheckoutForm)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 403) {
        err = apihelper.NewAPIError("User not authorized to perform the operation", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Delete all carts items
 * @param    string        accountNumber      parameter: Required
 * @param    int           cartId             parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) DeleteItems (
            accountNumber string,
            cartId int) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/carts/{cart_id}/items"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "cart_id" : cartId,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Delete(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Allow clients to get the list of cart items.
 * @param    string        accountNumber      parameter: Required
 * @param    int           cartId             parameter: Required
 * @param    *int          page               parameter: Optional
 * @param    *int          limit              parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetItems (
            accountNumber string,
            cartId int,
            page *int,
            limit *int) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/carts/{cart_id}/items"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "cart_id" : cartId,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithQueryParameters(queryBuilder, map[string]interface{} {
        "page" : apihelper.ToString(*page, "1"),
        "limit" : apihelper.ToString(*limit, "10"),
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    string                  accountNumber      parameter: Required
 * @param    int                     cartId             parameter: Required
 * @param    *models.ItemForm        itemForm           parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) CreateItems (
            accountNumber string,
            cartId int,
            itemForm *models.ItemForm) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/carts/{cart_id}/items"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "cart_id" : cartId,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Post(queryBuilder, headers, itemForm)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 403) {
        err = apihelper.NewAPIError("User not authorized to perform the operation", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource", response.Code, response.RawBody)
    } else if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Delete a cart item
 * @param    string        accountNumber      parameter: Required
 * @param    int           cartId             parameter: Required
 * @param    int           itemId             parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) DeleteItem (
            accountNumber string,
            cartId int,
            itemId int) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/carts/{cart_id}/items/{item_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "cart_id" : cartId,
        "item_id" : itemId,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Delete(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Allow clients to get a specific cart item.
 * @param    string        accountNumber      parameter: Required
 * @param    int           cartId             parameter: Required
 * @param    int           itemId             parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetItem (
            accountNumber string,
            cartId int,
            itemId int) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/carts/{cart_id}/items/{item_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "cart_id" : cartId,
        "item_id" : itemId,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Allow clients to get the list of orders.
 * @param    string         accountNumber      parameter: Required
 * @param    *int           page               parameter: Optional
 * @param    *int           limit              parameter: Optional
 * @param    *string        filter             parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetOrders (
            accountNumber string,
            page *int,
            limit *int,
            filter *string) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/orders"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithQueryParameters(queryBuilder, map[string]interface{} {
        "page" : apihelper.ToString(*page, "1"),
        "limit" : apihelper.ToString(*limit, "10"),
        "filter" : filter,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Allow clients to get a specific order.
 * @param    string        accountNumber      parameter: Required
 * @param    int           orderId            parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetOrder (
            accountNumber string,
            orderId int) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/orders/{order_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "order_id" : orderId,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Update a trunk
 * @param    string                   accountNumber      parameter: Required
 * @param    int                      trunkId            parameter: Required
 * @param    *models.TrunkForm        trunkForm          parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) UpdateTrunk (
            accountNumber string,
            trunkId int,
            trunkForm *models.TrunkForm) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/trunks/{trunk_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "trunk_id" : trunkId,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Patch(queryBuilder, headers, trunkForm)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Allow clients to get the list of tokens for the specific account.
 * @param    string        accountNumber      parameter: Required
 * @param    *int          page               parameter: Optional
 * @param    *int          limit              parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetAccessTokens (
            accountNumber string,
            page *int,
            limit *int) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/access-tokens"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithQueryParameters(queryBuilder, map[string]interface{} {
        "page" : apihelper.ToString(*page, "1"),
        "limit" : apihelper.ToString(*limit, "10"),
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Delete an access token
 * @param    string        accountNumber      parameter: Required
 * @param    string        token              parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) DeleteAccessToken (
            accountNumber string,
            token string) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/access-tokens/{token}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "token" : token,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Delete(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Allow clients to get a specific token.
 * @param    string        accountNumber      parameter: Required
 * @param    string        token              parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) GetAccessToken (
            accountNumber string,
            token string) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/access-tokens/{token}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "token" : token,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Update an account by a given account_number
 * @param    string                   accountNumber      parameter: Required
 * @param    string                   token              parameter: Required
 * @param    *models.TokenForm        tokenForm          parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *ACCOUNTS_IMPL) UpdateAccessToken (
            accountNumber string,
            token string,
            tokenForm *models.TokenForm) (string, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/access-tokens/{token}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
        "token" : token,
    }) 
    if err != nil {
        //error in template param handling
        return "", err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Patch(queryBuilder, headers, tokenForm)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }
    
    //returning the response
    return response.Body, nil
}

/**
 * Create a new Access Token.
 * @param    string                   accountNumber         parameter: Required
 * @param    *models.TokenForm        accessTokenForm       parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *ACCOUNTS_IMPL) CreateAccessTokens (
            accountNumber string,
            accessTokenForm *models.TokenForm) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/accounts/{account_number}/access-tokens"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "account_number" : accountNumber,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Post(queryBuilder, headers, accessTokenForm)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

