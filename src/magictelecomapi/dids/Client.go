/*
 * magictelecomapi
 *
 * This file was automatically generated by APIMATIC v2.0 on 06/23/2016
 */
package dids

import(
    "github.com/apimatic/unirest-go"
    "magictelecomapi"
    "magictelecomapi/apihelper"

)
/*
 * Client structure as interface implementation
 */
type DIDS_IMPL struct { }

/**
 * Allow clients to get the list of available countries
 * @param    *int        page      parameter: Optional
 * @param    *int        limit     parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *DIDS_IMPL) GetCountries (
            page *int,
            limit *int) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/dids/location/countries"

    //variable to hold errors
    var err error = nil
    
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithQueryParameters(queryBuilder, map[string]interface{} {
        "page" : apihelper.ToString(*page, "1"),
        "limit" : apihelper.ToString(*limit, "10"),
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Allow clients to get a specific country
 * @param    string        countryIso2      parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *DIDS_IMPL) GetCountryByIso2 (
            countryIso2 string) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/dids/location/countries/{country_iso2}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "country_iso2" : countryIso2,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Allow clients to get the list of available regions per country
 * @param    string        countryIso2      parameter: Required
 * @param    *int          page             parameter: Optional
 * @param    *int          limit            parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *DIDS_IMPL) GetRegions (
            countryIso2 string,
            page *int,
            limit *int) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/dids/location/countries/{country_iso2}/regions"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "country_iso2" : countryIso2,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithQueryParameters(queryBuilder, map[string]interface{} {
        "page" : apihelper.ToString(*page, "1"),
        "limit" : apihelper.ToString(*limit, "10"),
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Allow clients to get a specific region for a specific country
 * @param    string        countryIso2       parameter: Required
 * @param    string        regionHandle      parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *DIDS_IMPL) GetRegionsByHandle (
            countryIso2 string,
            regionHandle string) (interface{}, error) {
    //the base uri for api requests
    queryBuilder := magictelecomapi.BASEURI;
        
    //prepare query string for API call
    queryBuilder = queryBuilder + "/dids/location/countries/{country_iso2}/regions/{region_handle}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    queryBuilder, err = apihelper.AppendUrlWithTemplateParameters(queryBuilder, map[string]interface{} {
        "country_iso2" : countryIso2,
        "region_handle" : regionHandle,
    }) 
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    queryBuilder, err = apihelper.CleanUrl(queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : magictelecomapi.Config.XAuthToken,
    }

    //prepare API request
    request := unirest.Get(queryBuilder, headers)
    //and invoke the API call request to fetch the response
    response, err := unirest.AsString(request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (response.Code == 401) {
        err = apihelper.NewAPIError("You are not authenticated", response.Code, response.RawBody)
    } else if (response.Code == 403) {
        err = apihelper.NewAPIError("This action needs a valid WSSE header", response.Code, response.RawBody)
    } else if (response.Code == 404) {
        err = apihelper.NewAPIError("Resource not found", response.Code, response.RawBody)
    } else if (response.Code == 400) {
        err = apihelper.NewAPIError("Http bad request", response.Code, response.RawBody)
    } else if (response.Code < 200) || (response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper.NewAPIError("HTTP Response Not OK", response.Code, response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }
    
    //returning the response
    var retVal interface{}
    err = json.Unmarshal(response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

